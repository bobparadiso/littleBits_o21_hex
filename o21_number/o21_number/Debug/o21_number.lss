
o21_number.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000536  000005aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000536  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000005ba  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005ec  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  0000062c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000085c  00000000  00000000  00000664  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000773  00000000  00000000  00000ec0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000379  00000000  00000000  00001633  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  000019ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003f4  00000000  00000000  00001a00  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000d1  00000000  00000000  00001df4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001ec5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e3       	ldi	r30, 0x36	; 54
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 bb 00 	call	0x176	; 0x176 <main>
  8e:	0c 94 99 02 	jmp	0x532	; 0x532 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <setDisplayHex>:
};

//
void setDisplayHex(uint8_t val)
{
	uint8_t d1 = bitmap[val & 0x0f]; //right digit
  96:	e8 2f       	mov	r30, r24
  98:	ef 70       	andi	r30, 0x0F	; 15
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	e0 50       	subi	r30, 0x00	; 0
  9e:	ff 4f       	sbci	r31, 0xFF	; 255
  a0:	90 81       	ld	r25, Z
	uint8_t d2 = bitmap[(val & 0xf0) >> 4]; //left digit
  a2:	82 95       	swap	r24
  a4:	8f 70       	andi	r24, 0x0F	; 15
  a6:	e8 2f       	mov	r30, r24
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	e0 50       	subi	r30, 0x00	; 0
  ac:	ff 4f       	sbci	r31, 0xFF	; 255
  ae:	80 81       	ld	r24, Z
	//macro to create a mask depending on if the given bit is set in the source
	#define m(dstPos,src,srcPos) (((src & _BV(srcPos)) >> srcPos) * _BV(dstPos))
	
	//doing it this way so I can directly set each port to what its state should be
	//uses both digits at once since PORTD is used in both digits
	PORTB = m(0,d2,4) | m(2,d2,6) | m(3,d2,5) | m(4,d2,0) | m(5,d2,1);
  b0:	84 fb       	bst	r24, 4
  b2:	33 27       	eor	r19, r19
  b4:	30 f9       	bld	r19, 0
  b6:	28 2f       	mov	r18, r24
  b8:	21 70       	andi	r18, 0x01	; 1
  ba:	22 95       	swap	r18
  bc:	20 7f       	andi	r18, 0xF0	; 240
  be:	23 2b       	or	r18, r19
  c0:	86 fb       	bst	r24, 6
  c2:	33 27       	eor	r19, r19
  c4:	30 f9       	bld	r19, 0
  c6:	33 0f       	add	r19, r19
  c8:	33 0f       	add	r19, r19
  ca:	23 2b       	or	r18, r19
  cc:	85 fb       	bst	r24, 5
  ce:	33 27       	eor	r19, r19
  d0:	30 f9       	bld	r19, 0
  d2:	33 0f       	add	r19, r19
  d4:	33 0f       	add	r19, r19
  d6:	33 0f       	add	r19, r19
  d8:	23 2b       	or	r18, r19
  da:	81 fb       	bst	r24, 1
  dc:	33 27       	eor	r19, r19
  de:	30 f9       	bld	r19, 0
  e0:	32 95       	swap	r19
  e2:	33 0f       	add	r19, r19
  e4:	30 7e       	andi	r19, 0xE0	; 224
  e6:	23 2b       	or	r18, r19
  e8:	25 b9       	out	0x05, r18	; 5
	PORTC = m(2,d1,6) | m(3,d1,5) | m(4,d1,0);
  ea:	96 fb       	bst	r25, 6
  ec:	22 27       	eor	r18, r18
  ee:	20 f9       	bld	r18, 0
  f0:	32 2f       	mov	r19, r18
  f2:	33 0f       	add	r19, r19
  f4:	33 0f       	add	r19, r19
  f6:	95 fb       	bst	r25, 5
  f8:	22 27       	eor	r18, r18
  fa:	20 f9       	bld	r18, 0
  fc:	22 0f       	add	r18, r18
  fe:	22 0f       	add	r18, r18
 100:	22 0f       	add	r18, r18
 102:	23 2b       	or	r18, r19
 104:	39 2f       	mov	r19, r25
 106:	31 70       	andi	r19, 0x01	; 1
 108:	32 95       	swap	r19
 10a:	30 7f       	andi	r19, 0xF0	; 240
 10c:	23 2b       	or	r18, r19
 10e:	28 b9       	out	0x08, r18	; 8
	PORTD = m(0,d1,1) | m(2,d1,2) | m(3,d1,3) | m(4,d1,4) | m(6,d2,2) | m(7,d2,3);
 110:	39 2f       	mov	r19, r25
 112:	3c 70       	andi	r19, 0x0C	; 12
 114:	91 fb       	bst	r25, 1
 116:	22 27       	eor	r18, r18
 118:	20 f9       	bld	r18, 0
 11a:	23 2b       	or	r18, r19
 11c:	90 71       	andi	r25, 0x10	; 16
 11e:	92 2b       	or	r25, r18
 120:	82 fb       	bst	r24, 2
 122:	22 27       	eor	r18, r18
 124:	20 f9       	bld	r18, 0
 126:	22 95       	swap	r18
 128:	22 0f       	add	r18, r18
 12a:	22 0f       	add	r18, r18
 12c:	20 7c       	andi	r18, 0xC0	; 192
 12e:	92 2b       	or	r25, r18
 130:	83 fb       	bst	r24, 3
 132:	88 27       	eor	r24, r24
 134:	80 f9       	bld	r24, 0
 136:	87 95       	ror	r24
 138:	88 27       	eor	r24, r24
 13a:	87 95       	ror	r24
 13c:	89 2b       	or	r24, r25
 13e:	8b b9       	out	0x0b, r24	; 11
 140:	08 95       	ret

00000142 <adc_init>:
}

//
void adc_init()
{
	ADCSRA = _BV(ADEN) | _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0); //enable ADC and set 128 prescale
 142:	87 e8       	ldi	r24, 0x87	; 135
 144:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	ADMUX = _BV(REFS0); //AVCC with external capacitor at AREF pin
 148:	80 e4       	ldi	r24, 0x40	; 64
 14a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
 14e:	08 95       	ret

00000150 <adc_read>:
}

//
uint16_t adc_read(uint8_t adcx)
{
	ADMUX = (ADMUX & 0xf0) | adcx; //select channel
 150:	ec e7       	ldi	r30, 0x7C	; 124
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	90 81       	ld	r25, Z
 156:	90 7f       	andi	r25, 0xF0	; 240
 158:	89 2b       	or	r24, r25
 15a:	80 83       	st	Z, r24
	ADCSRA |= _BV(ADSC); //start conversion
 15c:	ea e7       	ldi	r30, 0x7A	; 122
 15e:	f0 e0       	ldi	r31, 0x00	; 0
 160:	80 81       	ld	r24, Z
 162:	80 64       	ori	r24, 0x40	; 64
 164:	80 83       	st	Z, r24
	
	while (ADCSRA & _BV(ADSC)); //spin till conversion is complete
 166:	80 81       	ld	r24, Z
 168:	86 fd       	sbrc	r24, 6
 16a:	fd cf       	rjmp	.-6      	; 0x166 <adc_read+0x16>
	
	return(ADC);
 16c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 170:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
}
 174:	08 95       	ret

00000176 <main>:

//
int main(void)
{
    wdt_reset();
 176:	a8 95       	wdr
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
 178:	9b e0       	ldi	r25, 0x0B	; 11
 17a:	88 e1       	ldi	r24, 0x18	; 24
 17c:	0f b6       	in	r0, 0x3f	; 63
 17e:	f8 94       	cli
 180:	a8 95       	wdr
 182:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
 186:	0f be       	out	0x3f, r0	; 63
 188:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
	wdt_enable(WDTO_120MS);
	
	adc_init();
 18c:	0e 94 a1 00 	call	0x142	; 0x142 <adc_init>
	
	//set display pins to output
	DDRB = 0b00111101;
 190:	8d e3       	ldi	r24, 0x3D	; 61
 192:	84 b9       	out	0x04, r24	; 4
	DDRC = 0b00011100;
 194:	8c e1       	ldi	r24, 0x1C	; 28
 196:	87 b9       	out	0x07, r24	; 7
	DDRD = 0b11111111;
 198:	8f ef       	ldi	r24, 0xFF	; 255
 19a:	8a b9       	out	0x0a, r24	; 10
		
    /* Replace with your application code */
	float val = 0;
 19c:	c1 2c       	mov	r12, r1
 19e:	d1 2c       	mov	r13, r1
 1a0:	76 01       	movw	r14, r12
	while (1)
    {
	    wdt_reset();
 1a2:	a8 95       	wdr
		float target = adc_read(0) >> 2;
 1a4:	80 e0       	ldi	r24, 0x00	; 0
 1a6:	0e 94 a8 00 	call	0x150	; 0x150 <adc_read>
		val = val + ((target - val) * 0.1f); //lerp towards target
 1aa:	96 95       	lsr	r25
 1ac:	87 95       	ror	r24
 1ae:	96 95       	lsr	r25
 1b0:	87 95       	ror	r24
 1b2:	bc 01       	movw	r22, r24
 1b4:	80 e0       	ldi	r24, 0x00	; 0
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	0e 94 9e 01 	call	0x33c	; 0x33c <__floatunsisf>
 1bc:	a7 01       	movw	r20, r14
 1be:	96 01       	movw	r18, r12
 1c0:	0e 94 02 01 	call	0x204	; 0x204 <__subsf3>
 1c4:	2d ec       	ldi	r18, 0xCD	; 205
 1c6:	3c ec       	ldi	r19, 0xCC	; 204
 1c8:	4c ec       	ldi	r20, 0xCC	; 204
 1ca:	5d e3       	ldi	r21, 0x3D	; 61
 1cc:	0e 94 2c 02 	call	0x458	; 0x458 <__mulsf3>
 1d0:	9b 01       	movw	r18, r22
 1d2:	ac 01       	movw	r20, r24
 1d4:	c7 01       	movw	r24, r14
 1d6:	b6 01       	movw	r22, r12
 1d8:	0e 94 03 01 	call	0x206	; 0x206 <__addsf3>
 1dc:	6b 01       	movw	r12, r22
 1de:	7c 01       	movw	r14, r24
		setDisplayHex(val + 0.5f);
 1e0:	20 e0       	ldi	r18, 0x00	; 0
 1e2:	30 e0       	ldi	r19, 0x00	; 0
 1e4:	40 e0       	ldi	r20, 0x00	; 0
 1e6:	5f e3       	ldi	r21, 0x3F	; 63
 1e8:	0e 94 03 01 	call	0x206	; 0x206 <__addsf3>
 1ec:	0e 94 6f 01 	call	0x2de	; 0x2de <__fixunssfsi>
 1f0:	86 2f       	mov	r24, r22
 1f2:	0e 94 4b 00 	call	0x96	; 0x96 <setDisplayHex>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1f6:	83 ec       	ldi	r24, 0xC3	; 195
 1f8:	99 e0       	ldi	r25, 0x09	; 9
 1fa:	01 97       	sbiw	r24, 0x01	; 1
 1fc:	f1 f7       	brne	.-4      	; 0x1fa <main+0x84>
 1fe:	00 c0       	rjmp	.+0      	; 0x200 <main+0x8a>
 200:	00 00       	nop
 202:	cf cf       	rjmp	.-98     	; 0x1a2 <main+0x2c>

00000204 <__subsf3>:
 204:	50 58       	subi	r21, 0x80	; 128

00000206 <__addsf3>:
 206:	bb 27       	eor	r27, r27
 208:	aa 27       	eor	r26, r26
 20a:	0e 94 1a 01 	call	0x234	; 0x234 <__addsf3x>
 20e:	0c 94 f2 01 	jmp	0x3e4	; 0x3e4 <__fp_round>
 212:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <__fp_pscA>
 216:	38 f0       	brcs	.+14     	; 0x226 <__addsf3+0x20>
 218:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <__fp_pscB>
 21c:	20 f0       	brcs	.+8      	; 0x226 <__addsf3+0x20>
 21e:	39 f4       	brne	.+14     	; 0x22e <__addsf3+0x28>
 220:	9f 3f       	cpi	r25, 0xFF	; 255
 222:	19 f4       	brne	.+6      	; 0x22a <__addsf3+0x24>
 224:	26 f4       	brtc	.+8      	; 0x22e <__addsf3+0x28>
 226:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__fp_nan>
 22a:	0e f4       	brtc	.+2      	; 0x22e <__addsf3+0x28>
 22c:	e0 95       	com	r30
 22e:	e7 fb       	bst	r30, 7
 230:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__fp_inf>

00000234 <__addsf3x>:
 234:	e9 2f       	mov	r30, r25
 236:	0e 94 03 02 	call	0x406	; 0x406 <__fp_split3>
 23a:	58 f3       	brcs	.-42     	; 0x212 <__addsf3+0xc>
 23c:	ba 17       	cp	r27, r26
 23e:	62 07       	cpc	r22, r18
 240:	73 07       	cpc	r23, r19
 242:	84 07       	cpc	r24, r20
 244:	95 07       	cpc	r25, r21
 246:	20 f0       	brcs	.+8      	; 0x250 <__addsf3x+0x1c>
 248:	79 f4       	brne	.+30     	; 0x268 <__addsf3x+0x34>
 24a:	a6 f5       	brtc	.+104    	; 0x2b4 <__addsf3x+0x80>
 24c:	0c 94 25 02 	jmp	0x44a	; 0x44a <__fp_zero>
 250:	0e f4       	brtc	.+2      	; 0x254 <__addsf3x+0x20>
 252:	e0 95       	com	r30
 254:	0b 2e       	mov	r0, r27
 256:	ba 2f       	mov	r27, r26
 258:	a0 2d       	mov	r26, r0
 25a:	0b 01       	movw	r0, r22
 25c:	b9 01       	movw	r22, r18
 25e:	90 01       	movw	r18, r0
 260:	0c 01       	movw	r0, r24
 262:	ca 01       	movw	r24, r20
 264:	a0 01       	movw	r20, r0
 266:	11 24       	eor	r1, r1
 268:	ff 27       	eor	r31, r31
 26a:	59 1b       	sub	r21, r25
 26c:	99 f0       	breq	.+38     	; 0x294 <__addsf3x+0x60>
 26e:	59 3f       	cpi	r21, 0xF9	; 249
 270:	50 f4       	brcc	.+20     	; 0x286 <__addsf3x+0x52>
 272:	50 3e       	cpi	r21, 0xE0	; 224
 274:	68 f1       	brcs	.+90     	; 0x2d0 <__addsf3x+0x9c>
 276:	1a 16       	cp	r1, r26
 278:	f0 40       	sbci	r31, 0x00	; 0
 27a:	a2 2f       	mov	r26, r18
 27c:	23 2f       	mov	r18, r19
 27e:	34 2f       	mov	r19, r20
 280:	44 27       	eor	r20, r20
 282:	58 5f       	subi	r21, 0xF8	; 248
 284:	f3 cf       	rjmp	.-26     	; 0x26c <__addsf3x+0x38>
 286:	46 95       	lsr	r20
 288:	37 95       	ror	r19
 28a:	27 95       	ror	r18
 28c:	a7 95       	ror	r26
 28e:	f0 40       	sbci	r31, 0x00	; 0
 290:	53 95       	inc	r21
 292:	c9 f7       	brne	.-14     	; 0x286 <__addsf3x+0x52>
 294:	7e f4       	brtc	.+30     	; 0x2b4 <__addsf3x+0x80>
 296:	1f 16       	cp	r1, r31
 298:	ba 0b       	sbc	r27, r26
 29a:	62 0b       	sbc	r22, r18
 29c:	73 0b       	sbc	r23, r19
 29e:	84 0b       	sbc	r24, r20
 2a0:	ba f0       	brmi	.+46     	; 0x2d0 <__addsf3x+0x9c>
 2a2:	91 50       	subi	r25, 0x01	; 1
 2a4:	a1 f0       	breq	.+40     	; 0x2ce <__addsf3x+0x9a>
 2a6:	ff 0f       	add	r31, r31
 2a8:	bb 1f       	adc	r27, r27
 2aa:	66 1f       	adc	r22, r22
 2ac:	77 1f       	adc	r23, r23
 2ae:	88 1f       	adc	r24, r24
 2b0:	c2 f7       	brpl	.-16     	; 0x2a2 <__addsf3x+0x6e>
 2b2:	0e c0       	rjmp	.+28     	; 0x2d0 <__addsf3x+0x9c>
 2b4:	ba 0f       	add	r27, r26
 2b6:	62 1f       	adc	r22, r18
 2b8:	73 1f       	adc	r23, r19
 2ba:	84 1f       	adc	r24, r20
 2bc:	48 f4       	brcc	.+18     	; 0x2d0 <__addsf3x+0x9c>
 2be:	87 95       	ror	r24
 2c0:	77 95       	ror	r23
 2c2:	67 95       	ror	r22
 2c4:	b7 95       	ror	r27
 2c6:	f7 95       	ror	r31
 2c8:	9e 3f       	cpi	r25, 0xFE	; 254
 2ca:	08 f0       	brcs	.+2      	; 0x2ce <__addsf3x+0x9a>
 2cc:	b0 cf       	rjmp	.-160    	; 0x22e <__addsf3+0x28>
 2ce:	93 95       	inc	r25
 2d0:	88 0f       	add	r24, r24
 2d2:	08 f0       	brcs	.+2      	; 0x2d6 <__addsf3x+0xa2>
 2d4:	99 27       	eor	r25, r25
 2d6:	ee 0f       	add	r30, r30
 2d8:	97 95       	ror	r25
 2da:	87 95       	ror	r24
 2dc:	08 95       	ret

000002de <__fixunssfsi>:
 2de:	0e 94 0b 02 	call	0x416	; 0x416 <__fp_splitA>
 2e2:	88 f0       	brcs	.+34     	; 0x306 <__fixunssfsi+0x28>
 2e4:	9f 57       	subi	r25, 0x7F	; 127
 2e6:	98 f0       	brcs	.+38     	; 0x30e <__fixunssfsi+0x30>
 2e8:	b9 2f       	mov	r27, r25
 2ea:	99 27       	eor	r25, r25
 2ec:	b7 51       	subi	r27, 0x17	; 23
 2ee:	b0 f0       	brcs	.+44     	; 0x31c <__fixunssfsi+0x3e>
 2f0:	e1 f0       	breq	.+56     	; 0x32a <__fixunssfsi+0x4c>
 2f2:	66 0f       	add	r22, r22
 2f4:	77 1f       	adc	r23, r23
 2f6:	88 1f       	adc	r24, r24
 2f8:	99 1f       	adc	r25, r25
 2fa:	1a f0       	brmi	.+6      	; 0x302 <__fixunssfsi+0x24>
 2fc:	ba 95       	dec	r27
 2fe:	c9 f7       	brne	.-14     	; 0x2f2 <__fixunssfsi+0x14>
 300:	14 c0       	rjmp	.+40     	; 0x32a <__fixunssfsi+0x4c>
 302:	b1 30       	cpi	r27, 0x01	; 1
 304:	91 f0       	breq	.+36     	; 0x32a <__fixunssfsi+0x4c>
 306:	0e 94 25 02 	call	0x44a	; 0x44a <__fp_zero>
 30a:	b1 e0       	ldi	r27, 0x01	; 1
 30c:	08 95       	ret
 30e:	0c 94 25 02 	jmp	0x44a	; 0x44a <__fp_zero>
 312:	67 2f       	mov	r22, r23
 314:	78 2f       	mov	r23, r24
 316:	88 27       	eor	r24, r24
 318:	b8 5f       	subi	r27, 0xF8	; 248
 31a:	39 f0       	breq	.+14     	; 0x32a <__fixunssfsi+0x4c>
 31c:	b9 3f       	cpi	r27, 0xF9	; 249
 31e:	cc f3       	brlt	.-14     	; 0x312 <__fixunssfsi+0x34>
 320:	86 95       	lsr	r24
 322:	77 95       	ror	r23
 324:	67 95       	ror	r22
 326:	b3 95       	inc	r27
 328:	d9 f7       	brne	.-10     	; 0x320 <__fixunssfsi+0x42>
 32a:	3e f4       	brtc	.+14     	; 0x33a <__fixunssfsi+0x5c>
 32c:	90 95       	com	r25
 32e:	80 95       	com	r24
 330:	70 95       	com	r23
 332:	61 95       	neg	r22
 334:	7f 4f       	sbci	r23, 0xFF	; 255
 336:	8f 4f       	sbci	r24, 0xFF	; 255
 338:	9f 4f       	sbci	r25, 0xFF	; 255
 33a:	08 95       	ret

0000033c <__floatunsisf>:
 33c:	e8 94       	clt
 33e:	09 c0       	rjmp	.+18     	; 0x352 <__floatsisf+0x12>

00000340 <__floatsisf>:
 340:	97 fb       	bst	r25, 7
 342:	3e f4       	brtc	.+14     	; 0x352 <__floatsisf+0x12>
 344:	90 95       	com	r25
 346:	80 95       	com	r24
 348:	70 95       	com	r23
 34a:	61 95       	neg	r22
 34c:	7f 4f       	sbci	r23, 0xFF	; 255
 34e:	8f 4f       	sbci	r24, 0xFF	; 255
 350:	9f 4f       	sbci	r25, 0xFF	; 255
 352:	99 23       	and	r25, r25
 354:	a9 f0       	breq	.+42     	; 0x380 <__floatsisf+0x40>
 356:	f9 2f       	mov	r31, r25
 358:	96 e9       	ldi	r25, 0x96	; 150
 35a:	bb 27       	eor	r27, r27
 35c:	93 95       	inc	r25
 35e:	f6 95       	lsr	r31
 360:	87 95       	ror	r24
 362:	77 95       	ror	r23
 364:	67 95       	ror	r22
 366:	b7 95       	ror	r27
 368:	f1 11       	cpse	r31, r1
 36a:	f8 cf       	rjmp	.-16     	; 0x35c <__floatsisf+0x1c>
 36c:	fa f4       	brpl	.+62     	; 0x3ac <__floatsisf+0x6c>
 36e:	bb 0f       	add	r27, r27
 370:	11 f4       	brne	.+4      	; 0x376 <__floatsisf+0x36>
 372:	60 ff       	sbrs	r22, 0
 374:	1b c0       	rjmp	.+54     	; 0x3ac <__floatsisf+0x6c>
 376:	6f 5f       	subi	r22, 0xFF	; 255
 378:	7f 4f       	sbci	r23, 0xFF	; 255
 37a:	8f 4f       	sbci	r24, 0xFF	; 255
 37c:	9f 4f       	sbci	r25, 0xFF	; 255
 37e:	16 c0       	rjmp	.+44     	; 0x3ac <__floatsisf+0x6c>
 380:	88 23       	and	r24, r24
 382:	11 f0       	breq	.+4      	; 0x388 <__floatsisf+0x48>
 384:	96 e9       	ldi	r25, 0x96	; 150
 386:	11 c0       	rjmp	.+34     	; 0x3aa <__floatsisf+0x6a>
 388:	77 23       	and	r23, r23
 38a:	21 f0       	breq	.+8      	; 0x394 <__floatsisf+0x54>
 38c:	9e e8       	ldi	r25, 0x8E	; 142
 38e:	87 2f       	mov	r24, r23
 390:	76 2f       	mov	r23, r22
 392:	05 c0       	rjmp	.+10     	; 0x39e <__floatsisf+0x5e>
 394:	66 23       	and	r22, r22
 396:	71 f0       	breq	.+28     	; 0x3b4 <__floatsisf+0x74>
 398:	96 e8       	ldi	r25, 0x86	; 134
 39a:	86 2f       	mov	r24, r22
 39c:	70 e0       	ldi	r23, 0x00	; 0
 39e:	60 e0       	ldi	r22, 0x00	; 0
 3a0:	2a f0       	brmi	.+10     	; 0x3ac <__floatsisf+0x6c>
 3a2:	9a 95       	dec	r25
 3a4:	66 0f       	add	r22, r22
 3a6:	77 1f       	adc	r23, r23
 3a8:	88 1f       	adc	r24, r24
 3aa:	da f7       	brpl	.-10     	; 0x3a2 <__floatsisf+0x62>
 3ac:	88 0f       	add	r24, r24
 3ae:	96 95       	lsr	r25
 3b0:	87 95       	ror	r24
 3b2:	97 f9       	bld	r25, 7
 3b4:	08 95       	ret

000003b6 <__fp_inf>:
 3b6:	97 f9       	bld	r25, 7
 3b8:	9f 67       	ori	r25, 0x7F	; 127
 3ba:	80 e8       	ldi	r24, 0x80	; 128
 3bc:	70 e0       	ldi	r23, 0x00	; 0
 3be:	60 e0       	ldi	r22, 0x00	; 0
 3c0:	08 95       	ret

000003c2 <__fp_nan>:
 3c2:	9f ef       	ldi	r25, 0xFF	; 255
 3c4:	80 ec       	ldi	r24, 0xC0	; 192
 3c6:	08 95       	ret

000003c8 <__fp_pscA>:
 3c8:	00 24       	eor	r0, r0
 3ca:	0a 94       	dec	r0
 3cc:	16 16       	cp	r1, r22
 3ce:	17 06       	cpc	r1, r23
 3d0:	18 06       	cpc	r1, r24
 3d2:	09 06       	cpc	r0, r25
 3d4:	08 95       	ret

000003d6 <__fp_pscB>:
 3d6:	00 24       	eor	r0, r0
 3d8:	0a 94       	dec	r0
 3da:	12 16       	cp	r1, r18
 3dc:	13 06       	cpc	r1, r19
 3de:	14 06       	cpc	r1, r20
 3e0:	05 06       	cpc	r0, r21
 3e2:	08 95       	ret

000003e4 <__fp_round>:
 3e4:	09 2e       	mov	r0, r25
 3e6:	03 94       	inc	r0
 3e8:	00 0c       	add	r0, r0
 3ea:	11 f4       	brne	.+4      	; 0x3f0 <__fp_round+0xc>
 3ec:	88 23       	and	r24, r24
 3ee:	52 f0       	brmi	.+20     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 3f0:	bb 0f       	add	r27, r27
 3f2:	40 f4       	brcc	.+16     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 3f4:	bf 2b       	or	r27, r31
 3f6:	11 f4       	brne	.+4      	; 0x3fc <__fp_round+0x18>
 3f8:	60 ff       	sbrs	r22, 0
 3fa:	04 c0       	rjmp	.+8      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 3fc:	6f 5f       	subi	r22, 0xFF	; 255
 3fe:	7f 4f       	sbci	r23, 0xFF	; 255
 400:	8f 4f       	sbci	r24, 0xFF	; 255
 402:	9f 4f       	sbci	r25, 0xFF	; 255
 404:	08 95       	ret

00000406 <__fp_split3>:
 406:	57 fd       	sbrc	r21, 7
 408:	90 58       	subi	r25, 0x80	; 128
 40a:	44 0f       	add	r20, r20
 40c:	55 1f       	adc	r21, r21
 40e:	59 f0       	breq	.+22     	; 0x426 <__fp_splitA+0x10>
 410:	5f 3f       	cpi	r21, 0xFF	; 255
 412:	71 f0       	breq	.+28     	; 0x430 <__fp_splitA+0x1a>
 414:	47 95       	ror	r20

00000416 <__fp_splitA>:
 416:	88 0f       	add	r24, r24
 418:	97 fb       	bst	r25, 7
 41a:	99 1f       	adc	r25, r25
 41c:	61 f0       	breq	.+24     	; 0x436 <__fp_splitA+0x20>
 41e:	9f 3f       	cpi	r25, 0xFF	; 255
 420:	79 f0       	breq	.+30     	; 0x440 <__fp_splitA+0x2a>
 422:	87 95       	ror	r24
 424:	08 95       	ret
 426:	12 16       	cp	r1, r18
 428:	13 06       	cpc	r1, r19
 42a:	14 06       	cpc	r1, r20
 42c:	55 1f       	adc	r21, r21
 42e:	f2 cf       	rjmp	.-28     	; 0x414 <__fp_split3+0xe>
 430:	46 95       	lsr	r20
 432:	f1 df       	rcall	.-30     	; 0x416 <__fp_splitA>
 434:	08 c0       	rjmp	.+16     	; 0x446 <__fp_splitA+0x30>
 436:	16 16       	cp	r1, r22
 438:	17 06       	cpc	r1, r23
 43a:	18 06       	cpc	r1, r24
 43c:	99 1f       	adc	r25, r25
 43e:	f1 cf       	rjmp	.-30     	; 0x422 <__fp_splitA+0xc>
 440:	86 95       	lsr	r24
 442:	71 05       	cpc	r23, r1
 444:	61 05       	cpc	r22, r1
 446:	08 94       	sec
 448:	08 95       	ret

0000044a <__fp_zero>:
 44a:	e8 94       	clt

0000044c <__fp_szero>:
 44c:	bb 27       	eor	r27, r27
 44e:	66 27       	eor	r22, r22
 450:	77 27       	eor	r23, r23
 452:	cb 01       	movw	r24, r22
 454:	97 f9       	bld	r25, 7
 456:	08 95       	ret

00000458 <__mulsf3>:
 458:	0e 94 3f 02 	call	0x47e	; 0x47e <__mulsf3x>
 45c:	0c 94 f2 01 	jmp	0x3e4	; 0x3e4 <__fp_round>
 460:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <__fp_pscA>
 464:	38 f0       	brcs	.+14     	; 0x474 <__mulsf3+0x1c>
 466:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <__fp_pscB>
 46a:	20 f0       	brcs	.+8      	; 0x474 <__mulsf3+0x1c>
 46c:	95 23       	and	r25, r21
 46e:	11 f0       	breq	.+4      	; 0x474 <__mulsf3+0x1c>
 470:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__fp_inf>
 474:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__fp_nan>
 478:	11 24       	eor	r1, r1
 47a:	0c 94 26 02 	jmp	0x44c	; 0x44c <__fp_szero>

0000047e <__mulsf3x>:
 47e:	0e 94 03 02 	call	0x406	; 0x406 <__fp_split3>
 482:	70 f3       	brcs	.-36     	; 0x460 <__mulsf3+0x8>

00000484 <__mulsf3_pse>:
 484:	95 9f       	mul	r25, r21
 486:	c1 f3       	breq	.-16     	; 0x478 <__mulsf3+0x20>
 488:	95 0f       	add	r25, r21
 48a:	50 e0       	ldi	r21, 0x00	; 0
 48c:	55 1f       	adc	r21, r21
 48e:	62 9f       	mul	r22, r18
 490:	f0 01       	movw	r30, r0
 492:	72 9f       	mul	r23, r18
 494:	bb 27       	eor	r27, r27
 496:	f0 0d       	add	r31, r0
 498:	b1 1d       	adc	r27, r1
 49a:	63 9f       	mul	r22, r19
 49c:	aa 27       	eor	r26, r26
 49e:	f0 0d       	add	r31, r0
 4a0:	b1 1d       	adc	r27, r1
 4a2:	aa 1f       	adc	r26, r26
 4a4:	64 9f       	mul	r22, r20
 4a6:	66 27       	eor	r22, r22
 4a8:	b0 0d       	add	r27, r0
 4aa:	a1 1d       	adc	r26, r1
 4ac:	66 1f       	adc	r22, r22
 4ae:	82 9f       	mul	r24, r18
 4b0:	22 27       	eor	r18, r18
 4b2:	b0 0d       	add	r27, r0
 4b4:	a1 1d       	adc	r26, r1
 4b6:	62 1f       	adc	r22, r18
 4b8:	73 9f       	mul	r23, r19
 4ba:	b0 0d       	add	r27, r0
 4bc:	a1 1d       	adc	r26, r1
 4be:	62 1f       	adc	r22, r18
 4c0:	83 9f       	mul	r24, r19
 4c2:	a0 0d       	add	r26, r0
 4c4:	61 1d       	adc	r22, r1
 4c6:	22 1f       	adc	r18, r18
 4c8:	74 9f       	mul	r23, r20
 4ca:	33 27       	eor	r19, r19
 4cc:	a0 0d       	add	r26, r0
 4ce:	61 1d       	adc	r22, r1
 4d0:	23 1f       	adc	r18, r19
 4d2:	84 9f       	mul	r24, r20
 4d4:	60 0d       	add	r22, r0
 4d6:	21 1d       	adc	r18, r1
 4d8:	82 2f       	mov	r24, r18
 4da:	76 2f       	mov	r23, r22
 4dc:	6a 2f       	mov	r22, r26
 4de:	11 24       	eor	r1, r1
 4e0:	9f 57       	subi	r25, 0x7F	; 127
 4e2:	50 40       	sbci	r21, 0x00	; 0
 4e4:	9a f0       	brmi	.+38     	; 0x50c <__stack+0xd>
 4e6:	f1 f0       	breq	.+60     	; 0x524 <__stack+0x25>
 4e8:	88 23       	and	r24, r24
 4ea:	4a f0       	brmi	.+18     	; 0x4fe <__mulsf3_pse+0x7a>
 4ec:	ee 0f       	add	r30, r30
 4ee:	ff 1f       	adc	r31, r31
 4f0:	bb 1f       	adc	r27, r27
 4f2:	66 1f       	adc	r22, r22
 4f4:	77 1f       	adc	r23, r23
 4f6:	88 1f       	adc	r24, r24
 4f8:	91 50       	subi	r25, 0x01	; 1
 4fa:	50 40       	sbci	r21, 0x00	; 0
 4fc:	a9 f7       	brne	.-22     	; 0x4e8 <__mulsf3_pse+0x64>
 4fe:	9e 3f       	cpi	r25, 0xFE	; 254
 500:	51 05       	cpc	r21, r1
 502:	80 f0       	brcs	.+32     	; 0x524 <__stack+0x25>
 504:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__fp_inf>
 508:	0c 94 26 02 	jmp	0x44c	; 0x44c <__fp_szero>
 50c:	5f 3f       	cpi	r21, 0xFF	; 255
 50e:	e4 f3       	brlt	.-8      	; 0x508 <__stack+0x9>
 510:	98 3e       	cpi	r25, 0xE8	; 232
 512:	d4 f3       	brlt	.-12     	; 0x508 <__stack+0x9>
 514:	86 95       	lsr	r24
 516:	77 95       	ror	r23
 518:	67 95       	ror	r22
 51a:	b7 95       	ror	r27
 51c:	f7 95       	ror	r31
 51e:	e7 95       	ror	r30
 520:	9f 5f       	subi	r25, 0xFF	; 255
 522:	c1 f7       	brne	.-16     	; 0x514 <__stack+0x15>
 524:	fe 2b       	or	r31, r30
 526:	88 0f       	add	r24, r24
 528:	91 1d       	adc	r25, r1
 52a:	96 95       	lsr	r25
 52c:	87 95       	ror	r24
 52e:	97 f9       	bld	r25, 7
 530:	08 95       	ret

00000532 <_exit>:
 532:	f8 94       	cli

00000534 <__stop_program>:
 534:	ff cf       	rjmp	.-2      	; 0x534 <__stop_program>
